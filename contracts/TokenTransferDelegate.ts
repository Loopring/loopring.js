/* GENERATED BY TYPECHAIN VER. 0.1.0 */

import { BigNumber } from "bignumber.js";
import {
  TypeChainContract,
  promisify,
  ITxParams,
  IPayableTxParams,
  DeferredTransactionWrapper
} from "./typechain-runtime";

export class TokenTransferDelegate extends TypeChainContract {
  public readonly rawWeb3Contract: any;

  public constructor(web3: any, address: string | BigNumber) {
    const abi = [
      {
        constant: true,
        inputs: [],
        name: "latestAddress",
        outputs: [{ name: "", type: "address" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [{ name: "max", type: "uint256" }],
        name: "getLatestAuthorizedAddresses",
        outputs: [{ name: "addresses", type: "address[]" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          { name: "token", type: "address" },
          { name: "from", type: "address" },
          { name: "to", type: "address" },
          { name: "value", type: "uint256" }
        ],
        name: "transferToken",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [{ name: "addr", type: "address" }],
        name: "authorizeAddress",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [],
        name: "claimOwnership",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          { name: "lrcTokenAddress", type: "address" },
          { name: "feeRecipient", type: "address" },
          { name: "batch", type: "bytes32[]" }
        ],
        name: "batchTransferToken",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "owner",
        outputs: [{ name: "", type: "address" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [{ name: "addr", type: "address" }],
        name: "isAddressAuthorized",
        outputs: [{ name: "", type: "bool" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "pendingOwner",
        outputs: [{ name: "", type: "address" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: false,
        inputs: [{ name: "newOwner", type: "address" }],
        name: "transferOwnership",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [{ name: "addr", type: "address" }],
        name: "deauthorizeAddress",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        anonymous: false,
        inputs: [
          { indexed: true, name: "addr", type: "address" },
          { indexed: false, name: "number", type: "uint32" }
        ],
        name: "AddressAuthorized",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          { indexed: true, name: "addr", type: "address" },
          { indexed: false, name: "number", type: "uint32" }
        ],
        name: "AddressDeauthorized",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          { indexed: true, name: "previousOwner", type: "address" },
          { indexed: true, name: "newOwner", type: "address" }
        ],
        name: "OwnershipTransferred",
        type: "event"
      }
    ];
    super(web3, address, abi);
  }

  static async createAndValidate(
    web3: any,
    address: string | BigNumber
  ): Promise<TokenTransferDelegate> {
    const contract = new TokenTransferDelegate(web3, address);
    const code = await promisify(web3.eth.getCode, [address]);
    if (code === "0x0") {
      throw new Error(`Contract at ${address} doesn't exist!`);
    }
    return contract;
  }

  public get latestAddress(): Promise<string> {
    return promisify(this.rawWeb3Contract.latestAddress, []);
  }
  public get owner(): Promise<string> {
    return promisify(this.rawWeb3Contract.owner, []);
  }
  public get pendingOwner(): Promise<string> {
    return promisify(this.rawWeb3Contract.pendingOwner, []);
  }
  public getLatestAuthorizedAddresses(
    max: BigNumber | number
  ): Promise<string[]> {
    return promisify(this.rawWeb3Contract.getLatestAuthorizedAddresses, [
      max.toString()
    ]);
  }
  public isAddressAuthorized(addr: BigNumber | string): Promise<boolean> {
    return promisify(this.rawWeb3Contract.isAddressAuthorized, [
      addr.toString()
    ]);
  }

  public transferTokenTx(
    token: BigNumber | string,
    from: BigNumber | string,
    to: BigNumber | string,
    value: BigNumber | number
  ): DeferredTransactionWrapper<ITxParams> {
    return new DeferredTransactionWrapper<ITxParams>(this, "transferToken", [
      token.toString(),
      from.toString(),
      to.toString(),
      value.toString()
    ]);
  }
  public authorizeAddressTx(
    addr: BigNumber | string
  ): DeferredTransactionWrapper<ITxParams> {
    return new DeferredTransactionWrapper<ITxParams>(this, "authorizeAddress", [
      addr.toString()
    ]);
  }
  public claimOwnershipTx(): DeferredTransactionWrapper<ITxParams> {
    return new DeferredTransactionWrapper<ITxParams>(
      this,
      "claimOwnership",
      []
    );
  }
  public batchTransferTokenTx(
    lrcTokenAddress: BigNumber | string,
    feeRecipient: BigNumber | string,
    batch: BigNumber[]
  ): DeferredTransactionWrapper<ITxParams> {
    return new DeferredTransactionWrapper<ITxParams>(
      this,
      "batchTransferToken",
      [lrcTokenAddress.toString(), feeRecipient.toString(), batch.toString()]
    );
  }
  public transferOwnershipTx(
    newOwner: BigNumber | string
  ): DeferredTransactionWrapper<ITxParams> {
    return new DeferredTransactionWrapper<ITxParams>(
      this,
      "transferOwnership",
      [newOwner.toString()]
    );
  }
  public deauthorizeAddressTx(
    addr: BigNumber | string
  ): DeferredTransactionWrapper<ITxParams> {
    return new DeferredTransactionWrapper<ITxParams>(
      this,
      "deauthorizeAddress",
      [addr.toString()]
    );
  }
}
