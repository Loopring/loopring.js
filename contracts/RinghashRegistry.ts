/* GENERATED BY TYPECHAIN VER. 0.1.0 */

import { BigNumber } from "bignumber.js";
import {
  TypeChainContract,
  promisify,
  ITxParams,
  IPayableTxParams,
  DeferredTransactionWrapper
} from "./typechain-runtime";

export class RinghashRegistry extends TypeChainContract {
  public readonly rawWeb3Contract: any;

  public constructor(web3: any, address: string | BigNumber) {
    const abi = [
      {
        constant: false,
        inputs: [
          { name: "ringminerList", type: "address[]" },
          { name: "ringhashList", type: "bytes32[]" }
        ],
        name: "batchSubmitRinghash",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: true,
        inputs: [
          { name: "ringSize", type: "uint256" },
          { name: "ringminer", type: "address" },
          { name: "vList", type: "uint8[]" },
          { name: "rList", type: "bytes32[]" },
          { name: "sList", type: "bytes32[]" }
        ],
        name: "computeAndGetRinghashInfo",
        outputs: [
          { name: "ringhash", type: "bytes32" },
          { name: "attributes", type: "bool[2]" }
        ],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [
          { name: "ringhash", type: "bytes32" },
          { name: "ringminer", type: "address" }
        ],
        name: "isReserved",
        outputs: [{ name: "", type: "bool" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          { name: "ringminer", type: "address" },
          { name: "ringhash", type: "bytes32" }
        ],
        name: "submitRinghash",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "blocksToLive",
        outputs: [{ name: "", type: "uint256" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [
          { name: "ringhash", type: "bytes32" },
          { name: "ringminer", type: "address" }
        ],
        name: "canSubmit",
        outputs: [{ name: "", type: "bool" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [{ name: "_blocksToLive", type: "uint256" }],
        payable: false,
        stateMutability: "nonpayable",
        type: "constructor"
      },
      {
        anonymous: false,
        inputs: [
          { indexed: true, name: "_ringminer", type: "address" },
          { indexed: true, name: "_ringhash", type: "bytes32" }
        ],
        name: "RinghashSubmitted",
        type: "event"
      }
    ];
    super(web3, address, abi);
  }

  static async createAndValidate(
    web3: any,
    address: string | BigNumber
  ): Promise<RinghashRegistry> {
    const contract = new RinghashRegistry(web3, address);
    const code = await promisify(web3.eth.getCode, [address]);
    if (code === "0x0") {
      throw new Error(`Contract at ${address} doesn't exist!`);
    }
    return contract;
  }

  public get blocksToLive(): Promise<BigNumber> {
    return promisify(this.rawWeb3Contract.blocksToLive, []);
  }
  public computeAndGetRinghashInfo(
    ringSize: BigNumber | number,
    ringminer: BigNumber | string,
    vList: BigNumber[],
    rList: BigNumber[],
    sList: BigNumber[]
  ): Promise<[BigNumber, boolean[]]> {
    return promisify(this.rawWeb3Contract.computeAndGetRinghashInfo, [
      ringSize.toString(),
      ringminer.toString(),
      vList.toString(),
      rList.toString(),
      sList.toString()
    ]);
  }
  public isReserved(
    ringhash: BigNumber,
    ringminer: BigNumber | string
  ): Promise<boolean> {
    return promisify(this.rawWeb3Contract.isReserved, [
      ringhash.toString(),
      ringminer.toString()
    ]);
  }
  public canSubmit(
    ringhash: BigNumber,
    ringminer: BigNumber | string
  ): Promise<boolean> {
    return promisify(this.rawWeb3Contract.canSubmit, [
      ringhash.toString(),
      ringminer.toString()
    ]);
  }

  public batchSubmitRinghashTx(
    ringminerList: string[],
    ringhashList: BigNumber[]
  ): DeferredTransactionWrapper<ITxParams> {
    return new DeferredTransactionWrapper<ITxParams>(
      this,
      "batchSubmitRinghash",
      [ringminerList.toString(), ringhashList.toString()]
    );
  }
  public submitRinghashTx(
    ringminer: BigNumber | string,
    ringhash: BigNumber
  ): DeferredTransactionWrapper<ITxParams> {
    return new DeferredTransactionWrapper<ITxParams>(this, "submitRinghash", [
      ringminer.toString(),
      ringhash.toString()
    ]);
  }
}
