/* GENERATED BY TYPECHAIN VER. 0.1.0 */

import { BigNumber } from "bignumber.js";
import {
  TypeChainContract,
  promisify,
  ITxParams,
  IPayableTxParams,
  DeferredTransactionWrapper
} from "./typechain-runtime";

export class TokenRegistry extends TypeChainContract {
  public readonly rawWeb3Contract: any;

  public constructor(web3: any, address: string | BigNumber) {
    const abi = [
      {
        constant: false,
        inputs: [
          { name: "_token", type: "address" },
          { name: "_symbol", type: "string" }
        ],
        name: "unregisterToken",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: true,
        inputs: [{ name: "symbol", type: "string" }],
        name: "getAddressBySymbol",
        outputs: [{ name: "", type: "address" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [{ name: "tokenList", type: "address[]" }],
        name: "areAllTokensRegistered",
        outputs: [{ name: "", type: "bool" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [{ name: "_token", type: "address" }],
        name: "isTokenRegistered",
        outputs: [{ name: "", type: "bool" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: false,
        inputs: [],
        name: "claimOwnership",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: true,
        inputs: [{ name: "", type: "uint256" }],
        name: "tokens",
        outputs: [{ name: "", type: "address" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "owner",
        outputs: [{ name: "", type: "address" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          { name: "_token", type: "address" },
          { name: "_symbol", type: "string" }
        ],
        name: "registerToken",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "pendingOwner",
        outputs: [{ name: "", type: "address" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: false,
        inputs: [{ name: "newOwner", type: "address" }],
        name: "transferOwnership",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: true,
        inputs: [{ name: "symbol", type: "string" }],
        name: "isTokenRegisteredBySymbol",
        outputs: [{ name: "", type: "bool" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        anonymous: false,
        inputs: [
          { indexed: true, name: "previousOwner", type: "address" },
          { indexed: true, name: "newOwner", type: "address" }
        ],
        name: "OwnershipTransferred",
        type: "event"
      }
    ];
    super(web3, address, abi);
  }

  static async createAndValidate(
    web3: any,
    address: string | BigNumber
  ): Promise<TokenRegistry> {
    const contract = new TokenRegistry(web3, address);
    const code = await promisify(web3.eth.getCode, [address]);
    if (code === "0x0") {
      throw new Error(`Contract at ${address} doesn't exist!`);
    }
    return contract;
  }

  public get owner(): Promise<string> {
    return promisify(this.rawWeb3Contract.owner, []);
  }
  public get pendingOwner(): Promise<string> {
    return promisify(this.rawWeb3Contract.pendingOwner, []);
  }
  public getAddressBySymbol(symbol: string): Promise<string> {
    return promisify(this.rawWeb3Contract.getAddressBySymbol, [
      symbol.toString()
    ]);
  }
  public areAllTokensRegistered(tokenList: string[]): Promise<boolean> {
    return promisify(this.rawWeb3Contract.areAllTokensRegistered, [
      tokenList.toString()
    ]);
  }
  public isTokenRegistered(_token: BigNumber | string): Promise<boolean> {
    return promisify(this.rawWeb3Contract.isTokenRegistered, [
      _token.toString()
    ]);
  }
  public tokens(index: BigNumber | number): Promise<string> {
    return promisify(this.rawWeb3Contract.tokens, [index.toString()]);
  }
  public isTokenRegisteredBySymbol(symbol: string): Promise<boolean> {
    return promisify(this.rawWeb3Contract.isTokenRegisteredBySymbol, [
      symbol.toString()
    ]);
  }

  public unregisterTokenTx(
    _token: BigNumber | string,
    _symbol: string
  ): DeferredTransactionWrapper<ITxParams> {
    return new DeferredTransactionWrapper<ITxParams>(this, "unregisterToken", [
      _token.toString(),
      _symbol.toString()
    ]);
  }
  public claimOwnershipTx(): DeferredTransactionWrapper<ITxParams> {
    return new DeferredTransactionWrapper<ITxParams>(
      this,
      "claimOwnership",
      []
    );
  }
  public registerTokenTx(
    _token: BigNumber | string,
    _symbol: string
  ): DeferredTransactionWrapper<ITxParams> {
    return new DeferredTransactionWrapper<ITxParams>(this, "registerToken", [
      _token.toString(),
      _symbol.toString()
    ]);
  }
  public transferOwnershipTx(
    newOwner: BigNumber | string
  ): DeferredTransactionWrapper<ITxParams> {
    return new DeferredTransactionWrapper<ITxParams>(
      this,
      "transferOwnership",
      [newOwner.toString()]
    );
  }
}
